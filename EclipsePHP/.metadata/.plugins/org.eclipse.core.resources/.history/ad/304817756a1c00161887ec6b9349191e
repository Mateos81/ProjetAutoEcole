<?php
/**
 * Projet 2ème Année 3iL
 * @author CIULLI - MATEOS - ROUX
 * @version 1.0
 * @package BLL
 */

include __DIR__ . "/../DAL/DAL_Formule.php";
 
 /**
  * Classe représentant une formule.
  */
class Formule {
    
    /** Numéro de la formule. */
    private $formule_num;
    
    /** Nombre de leçons de conduite de la formule. */
    private $formule_nbLeconConduite;
    
    /** Prix de la formule. */
    private $formule_prix;
    
    /** Prix d'un ticket de la formule. */
    private $formule_ticketPrix;
    
    /**
     * Constructeur vide servant à créer une formule via les modifieurs.
     * A utiliser quand toutes les informations ne sont pas disponibles.
     * Peut aussi être utilisé pour typer les champs.
     */
    public function __construct() {
        $this->formule_num = -1;
        $this->formule_nbLeconConduite = -1;
        $this->formule_prix = 0.0;
        $this->formule_ticketPrix = 0.0;
    }
    
    /**
     * "Constructeur" complet.
     * @param $num Numéro de la formule.
     * @param $nbLeconConduite Nombre de leçons de conduite de la formule.
     * @param $prix Prix de la formule.
     * @param $ticketPrix Prix d'un ticket supplémentaire.
     * @return Une nouvelle instance de Formule.
     */
    public function Formule($num, $nbLeconConduite, $prix, $ticketPrix) {
    	$instance = new self();
    	
    	$instance->formule_num = $num;
    	$instance->formule_nbLeconConduite = $nbLeconConduite;
    	$instance->formule_prix = $prix;
    	$instance->formule_ticketPrix = $ticketPrix;
    	
    	return $instance;
    }
    
    /**
     * Accesseur sur le numéro de la formule courante.
     * @return Le numéro de la formule.
     */
    public function getFormule_num() {
        return $this->formule_num;
    }
    
    /**
     * Accesseur sur le nombre de leçons de conduite de la formule courante.
     * @return Le nombre de leçons de conduite de la formule.
     */
    public function getFormule_nbLeconConduite() {
        return $this->formule_nbLeconConduite;
    }
    
    /**
     * Accesseur sur le prix de la formule courante.
     * @return Le prix de la formule.
     */
    public function getFormule_prix() {
        return $this->formule_prix;
    }
    
    /**
     * Accesseur sur le prix unitaire d'un ticket de la formule courante.
     * @return Le prix d'un ticket de la formule.
     */
    public function getFormule_ticketPrix() {
        return $this->formule_ticketPrix;
    }
    
    /**
     * Modifieur sur le nombre de leçons de conduite de la formule courante.
     * @param $valeur Nouvelle valeur.
     */
    public function setFormule_nbLeconConduite($valeur) {
        $this->formule_nbLeconConduite = $valeur;
    }
    
    /**
     * Modifieur sur le prix de la formule courante.
     * @param $valeur Nouvelle valeur.
     */
    public function setFormule_prix($valeur) {
        $this->formule_prix = $valeur;
    }
    
    /**
     * Modifieur sur le prix unitaire d'un ticket de la formule courante.
     * @param $valeur Nouvelle valeur.
     */
    public function setFormule_ticketPrix($valeur) {
        $this->formule_ticketPrix = $valeur;
    }
    
    /**
     * Création d'une nouvelle formule en base de données.
     */
    public function creerFormule() {
    	// Création en base
    	DAL_Formule::creerFormule(
    		$this->formule_nbLeconConduite,
	        $this->formule_prix,
	        $this->formule_ticketPrix);
    	 
    	// Récupération de l'identifiant unique
    	// N'est pas retourné par creerFormule
    	// car on ne peut faire de RETURN avec un UPDATE
    	// dans la même fonction...
    	$this->formule_num = DAL_Formule::getCurFormule();
    }
    
    /**
     * Mise en jour en base d'une formule
     * suivant les informations de l'objet courant.
     */
    public function modifierFormule() {
    	DAL_Formule::modifierFormule(
    		$this->formule_num,
    		$this->formule_nbLeconConduite,
	        $this->formule_prix,
	        $this->formule_ticketPrix);
    }
    
    /**
     * Suppression en base de la formule courante.
     */
    public function supprimerFormule() {
    	DAL_Formule::supprimerFormule($this->formule_num);
    }
    
    /**
     * Récupère et renvoie la liste de toutes les formules
     * @return La liste des formules.
     */
    public static function listeFormules() {
        $listeFormules = DAL_Formule::listeFormules();
    	
		while ($row = 
				oci_fetch_array($listeFormules, OCI_ASSOC+OCI_RETURN_NULLS)) {
			$formule = new Formule();
			
			$formule->Formule(
				intval($row['FORMULE_NUM']),
				$row['FORMULE_NBLECONCONDUITE'],
				$row['FORMULE_PRIX'],
				intval($row['FORMULE_TICKETPRIX']));
			
			$listeFormules[] = $formule;
		}
        
        return $listeFormules;
    }
}
?>
